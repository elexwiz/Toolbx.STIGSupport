function Get-VulnerabilityList {
    [CmdletBinding()]
    [OutputType([xml])]
    param
    (
        [Parameter()]
        [psobject]
        $XccdfBenchmark
    )

    [System.Collections.ArrayList] $vulnerabilityList = @()

    foreach ( $vulnerability in $XccdfBenchmark.Group ) {

        [xml]$vulnerabiltyDiscussionElement = "<discussionroot>$([System.Security.SecurityElement]::Escape($vulnerability.Rule.description))</discussionroot>"

        [void] $vulnerabilityList.Add(
            @(
                [PSCustomObject]@{ Name = 'Vuln_Num'; Value = $vulnerability.id },
                [PSCustomObject]@{ Name = 'Severity'; Value = $vulnerability.Rule.severity },
                [PSCustomObject]@{ Name = 'Group_Title'; Value = $vulnerability.title },
                [PSCustomObject]@{ Name = 'Rule_ID'; Value = $vulnerability.Rule.id },
                [PSCustomObject]@{ Name = 'Rule_Ver'; Value = $vulnerability.Rule.version },
                [PSCustomObject]@{ Name = 'Rule_Title'; Value = $vulnerability.Rule.title },
                [PSCustomObject]@{ Name = 'Vuln_Discuss'; Value = $vulnerabiltyDiscussionElement.discussionroot.VulnDiscussion },
                [PSCustomObject]@{ Name = 'IA_Controls'; Value = $vulnerabiltyDiscussionElement.discussionroot.IAControls },
                [PSCustomObject]@{ Name = 'Check_Content'; Value = $vulnerability.Rule.check.'check-content' },
                [PSCustomObject]@{ Name = 'Fix_Text'; Value = $vulnerability.Rule.fixtext.InnerText },
                [PSCustomObject]@{ Name = 'False_Positives'; Value = $vulnerabiltyDiscussionElement.discussionroot.FalsePositives },
                [PSCustomObject]@{ Name = 'False_Negatives'; Value = $vulnerabiltyDiscussionElement.discussionroot.FalseNegatives },
                [PSCustomObject]@{ Name = 'Documentable'; Value = $vulnerabiltyDiscussionElement.discussionroot.Documentable },
                [PSCustomObject]@{ Name = 'Mitigations'; Value = $vulnerabiltyDiscussionElement.discussionroot.Mitigations },
                [PSCustomObject]@{ Name = 'Potential_Impact'; Value = $vulnerabiltyDiscussionElement.discussionroot.PotentialImpacts },
                [PSCustomObject]@{ Name = 'Third_Party_Tools'; Value = $vulnerabiltyDiscussionElement.discussionroot.ThirdPartyTools },
                [PSCustomObject]@{ Name = 'Mitigation_Control'; Value = $vulnerabiltyDiscussionElement.discussionroot.MitigationControl },
                [PSCustomObject]@{ Name = 'Responsibility'; Value = $vulnerabiltyDiscussionElement.discussionroot.Responsibility },
                [PSCustomObject]@{ Name = 'Security_Override_Guidance'; Value = $vulnerabiltyDiscussionElement.discussionroot.SeverityOverrideGuidance },
                [PSCustomObject]@{ Name = 'Check_Content_Ref'; Value = $vulnerability.Rule.check.'check-content-ref'.href },
                [PSCustomObject]@{ Name = 'Weight'; Value = $vulnerability.Rule.Weight },
                [PSCustomObject]@{ Name = 'Class'; Value = 'Unclass' },
                [PSCustomObject]@{ Name = 'STIGRef'; Value = "$($XccdfBenchmark.title) :: $($XccdfBenchmark.'plain-text'.InnerText)" },
                [PSCustomObject]@{ Name = 'TargetKey'; Value = $vulnerability.Rule.reference.identifier }

                # Some Stigs have multiple Control Correlation Identifiers (CCI)
                $(
                    # Extract only the cci entries
                    $CCIREFList = $vulnerability.Rule.ident |
                    Where-Object { $PSItem.system -eq 'http://iase.disa.mil/cci' } |
                    Select-Object 'InnerText' -ExpandProperty 'InnerText'

                    foreach ($CCIREF in $CCIREFList) {
                        [PSCustomObject]@{ Name = 'CCI_REF'; Value = $CCIREF }
                    }
                )
            )
        )
    }

    return $vulnerabilityList
}